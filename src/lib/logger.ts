// src/lib/logger.ts
import chalk from 'chalk';

enum LogLevel {
  DEBUG = 'DEBUG',
  INFO = 'INFO',
  WARN = 'WARN',
  ERROR = 'ERROR'
}

const logColors = {
  [LogLevel.DEBUG]: chalk.blue,
  [LogLevel.INFO]: chalk.green,
  [LogLevel.WARN]: chalk.yellow,
  [LogLevel.ERROR]: chalk.red
};

const logPrefixes = {
  [LogLevel.DEBUG]: 'üêõ',
  [LogLevel.INFO]: '‚ÑπÔ∏è',
  [LogLevel.WARN]: '‚ö†Ô∏è',
  [LogLevel.ERROR]: 'üö®'
};

// O tipo LogContext agora representa o contexto da inst√¢ncia
type LogContext = string;

class Logger {
  private context: LogContext; // Armazena o contexto da inst√¢ncia

  // Construtor para receber o contexto ao criar a inst√¢ncia
  constructor(context: LogContext) {
    this.context = context;
  }

  // M√©todo privado de log agora √© um m√©todo de inst√¢ncia
  private log(level: LogLevel, message: string, ...args: any[]) {
    const color = logColors[level];
    const prefix = logPrefixes[level];
    const timestamp = new Date().toLocaleString('pt-BR', {
      timeZone: 'America/Sao_Paulo',
      hourCycle: 'h24'
    });
    // Usa this.context para obter o contexto da inst√¢ncia
    console.log(
      color(`${prefix} [${timestamp}] [${level}] [${this.context}] ${message}`),
      ...args
    );
  }

  // M√©todos p√∫blicos de log agora s√£o m√©todos de inst√¢ncia
  // e n√£o precisam mais receber o 'context' como par√¢metro
  debug(message: string, ...args: any[]) {
    this.log(LogLevel.DEBUG, message, ...args);
  }

  info(message: string, ...args: any[]) {
    this.log(LogLevel.INFO, message, ...args);
  }

  warn(message: string, ...args: any[]) {
    this.log(LogLevel.WARN, message, ...args);
  }

  error(message: string, ...args: any[]) {
    this.log(LogLevel.ERROR, message, ...args);
  }

  // Opcional: Manter um m√©todo est√°tico para logs sem contexto espec√≠fico
  // ou para criar inst√¢ncias (padr√£o Factory)
  // static logGlobal(level: LogLevel, message: string, ...args: any[]) {
  //   const color = logColors[level];
  //   const prefix = logPrefixes[level];
  //   const timestamp = new Date().toISOString();
  //   console.log(
  //     color(`${prefix} [${timestamp}] [${level}] ${message}`),
  //     ...args
  //   );
  // }
  // static infoGlobal = (message: string, ...args: any[]) => Logger.logGlobal(LogLevel.INFO, message, ...args);
  // // ... outros m√©todos globais ...

  // Ou um factory method:
  // static create(context: LogContext): Logger {
  //   return new Logger(context);
  // }
}

export default Logger;
